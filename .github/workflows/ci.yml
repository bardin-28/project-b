name: CI Pipeline

on:
  push:
    branches:
      - main
      - destroy
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure'
        required: true
        type: boolean
        default: false

jobs:
  build:
    if: github.ref != 'refs/heads/destroy' && !inputs.destroy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install Dependencies
        run: npm install

      - name: Build Project
        run: npm run build

  docker:
    needs: build
    if: github.ref != 'refs/heads/destroy' && !inputs.destroy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/project-b:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/project-b:latest

  terraform:
    needs: [build, docker]
    if: github.ref != 'refs/heads/destroy' && !inputs.destroy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Import existing Security Group
        run: |
          cd terraform
          terraform import -var="STAGE_ENV=${{ secrets.STAGE_ENV }}" aws_security_group.vps_sg ${{ secrets.AWS_SECURITY_GROUP_ID }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="STAGE_ENV=${{ secrets.STAGE_ENV }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -var="STAGE_ENV=${{ secrets.STAGE_ENV }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  destroy:
    if: github.ref == 'refs/heads/destroy' || inputs.destroy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Destroy
        run: |
          cd terraform
          terraform destroy -auto-approve -var="STAGE_ENV=${{ secrets.STAGE_ENV }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
